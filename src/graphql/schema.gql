type Query {
  getToken(email: String!): String
  me: User
  notificationCollection(idBoard: String): [Notification]
  getUsersInviteToBoard(idBoard: String!, query: String): [User]
}

input InputEmail {
  email: String!
  passWord: String!
}

input InputVerifyEmail {
  email: String!
  otp: String!
}

input InputLogin {
  idToken: String!
  deviceId: String!
}

input CheckListInput {
  content: String!
  isChecked: Boolean!
}

input InputUpdateCard {
  idCard: String!
  title: String
  description: String
  users: [String!]
  endDate: String
  startedDate: String
  reminder: Reminder!
  checkLists: [CheckListInput!]
}

input InputMoveList {
  oldListIndex: Int!
  newListIndex: Int!
}

input InputMoveCard {
  oldItemIndex: Int!
  oldListIndex: Int!
  newItemIndex: Int!
  newListIndex: Int!
}

type Mutation {
  loginByGoogle(input: InputLogin!): String
  loginByEmail(input: InputLogin!): String
  registerByEmail(input: InputEmail!): String
  testCallSubscription: String
  createBoard(title: String!, color: String, isPublic: Boolean!): Board
  getBoards: [Board]
  leaveBoard(idBoard: String!): Boolean
  sendOTPEmail(email: String!): Boolean
  verifyEmail(input: InputVerifyEmail!): Boolean
  logout: Boolean
  getLists(idBoard: String!): [List]
  createList(idBoard: String!, label: String!): List
  updateList(idList: String!, label: String!): List
  deleteList(idList: String!): Boolean
  getCard(idCard: String!): Card
  createCard(idList: String!, title: String!): Card
  updateCard(input: InputUpdateCard!): Card
  deleteCard(idList: String!, idCard: String!): Boolean
  moveList(idBoard: String!, input: InputMoveList!): Boolean
  moveCard(idBoard: String!, input: InputMoveCard!): Boolean
  inviteUsersToBoard(idBoard: String!, idUsers: [String!]): Boolean
  acceptInviteToBoard(idNotification: String!, idBoard: String!): Boolean
}
type Subscription {
  test(id: String!): String
}
type User {
  uid: String!
  avatar: String
  createdAt: String
  updatedAt: String
  email: String
  fullName: String
}

type Board {
  id: String!
  ownerUser: User!
  color: String
  title: String
  isPublic: Boolean!
  # lists: [List!]
  # users: [User!]
  createdAt: String!
}

type List {
  id: String!
  # board: Board!
  label: String!
  createdAt: String!
  cards: [Card!]
  createdBy: User!
}

type Card {
  id: String!
  # list: List!
  title: String
  description: String
  users: [User!]
  endDate: String
  startedDate: String
  reminder: Reminder!
  comments: [Comment!]
  checkLists: [CheckList!]
  createdAt: String!
  createdBy: User!
}

enum Reminder {
  Unknown
  OnDueDate
  FiveMinutesBefore
  TenMinutesBefore
  FifteenMinutesBefore
  OneHourBefore
  TwoHoursBefore
  OneDayBefore
  TwoDaysBefore
}

type Comment {
  id: String!
  user: User!
  # card: Card!
  comment: String!
  createdAt: String!
}

type CheckList {
  id: String!
  # card: Card!
  content: String!
  isChecked: Boolean!
}

type Notification {
  id: String!
  createdAt: String!
  is_seen: Boolean!
  creater: User!
  title: String!
  content: String!
  topic: TopicNotification!
  data: String!
}

enum TopicNotification {
  Board
  List
  Card
  CheckList
  Comment
  InviteUserToBoard
}
